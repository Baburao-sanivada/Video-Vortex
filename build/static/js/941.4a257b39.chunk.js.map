{"version":3,"file":"static/js/941.4a257b39.chunk.js","mappings":"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","sources":["Components/SearchVideoCard.js","Components/SearchResultsPage.js","utils/PublishedData.js"],"sourcesContent":["import React from 'react'\r\nimport { useState,useEffect } from 'react';\r\nimport { channelImage_api } from '../utils/constants';\r\nimport { PublishedTimeOfVideo } from '../utils/PublishedData';\r\n\r\n// Each Video Card in Search Results Page\r\nconst SearchVideoCard = ({data}) => {\r\n  const [details,setDetails]=useState(null);\r\n    \r\n  useEffect(()=>{\r\n      getChannelImage();\r\n  },[])\r\n\r\n  // Getting Channel Data with Channel Id\r\n  const getChannelImage=async ()=>{\r\n      const api_data=await fetch(channelImage_api+\"&id=\"+data?.channelId);\r\n      const json=await api_data.json();\r\n      setDetails(json);\r\n      // console.log(json);\r\n  }\r\n\r\n  // Loading Shimmer\r\n  if(details==null) return <div>Loading...</div>\r\n  const imgUrl=details?.items[0].snippet?.thumbnails?.high?.url || {};\r\n\r\n\r\n  return (\r\n    <div className='flex max-sm:flex-col flex-row bg-gray-50 py-2 dark:bg-slate-800 max-sm:px-10 max-sm:pb-10'>\r\n      {/* Thumbnail */}\r\n        <img className=\"flex justify-center rounded-lg h-40 max-sm:w-full\" src={data?.thumbnails?.medium?.url}/>\r\n        {/* Video Details */}\r\n        <div className='px-2 w-full flex flex-col'>\r\n            <span className='font-semibold text-lg dark:text-white'>{data?.title}</span>\r\n            <p className='text-sm text-slate-600 mb-2 dark:text-slate-300'>{PublishedTimeOfVideo(data?.publishedAt)}</p>\r\n            <div className='flex items-center'><img className=\"w-8 my-2 rounded-full\" src={imgUrl}></img>\r\n            <span className='flex items-center px-2 text-slate-700 text-sm dark:text-slate-200 '>{data?.channelTitle}</span>\r\n            </div>\r\n            {/* Video Description */}\r\n            <span className='text-sm text-slate-700 dark:text-slate-300'>{data?.description}</span>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchVideoCard","import React, { useEffect ,useState} from 'react'\r\nimport { useSearchParams } from 'react-router-dom'\r\nimport { Google_api_key, Search_results_api } from '../utils/constants'\r\nimport SearchVideoCard from './SearchVideoCard'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChannelId } from '../utils/channelIdSlice'\r\n\r\n// Search Results\r\nconst SearchResultsPage = () => {\r\n  const [params]=useSearchParams();\r\n  const query=params.get(\"q\");\r\n  const [searchresults,setSearchResults]=useState([]);\r\n  const dispatcher=useDispatch();\r\n\r\n  useEffect(()=>{\r\n    getSearchData();\r\n  },[query])\r\n\r\n  const getSearchData=async ()=>{\r\n    const data=await fetch(Search_results_api+query+\"&key=\"+Google_api_key);\r\n    const json=await data.json();\r\n    setSearchResults(json?.items);\r\n  } \r\n\r\n  return (\r\n    <div className='p-2 w-full dark:bg-slate-800'>\r\n      {\r\n        searchresults.map((result)=> <Link \r\n        key={result?.id?.videoId} \r\n        to={\"/watch?v=\"+result?.id?.videoId} \r\n        onClick={()=>{\r\n          dispatcher(setChannelId(result?.snippet?.channelId))\r\n        }}>\r\n\r\n        <SearchVideoCard \r\n        data={result?.snippet}/>\r\n        </Link>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchResultsPage","export const PublishedTimeOfVideo = (publishedAt) => {\r\n\tconst publishedDate = new Date(publishedAt);\r\n\tconst currentDate = new Date();\r\n\tif (currentDate.getFullYear() - publishedDate.getFullYear()) {\r\n\t\treturn (\r\n\t\t\tcurrentDate.getFullYear() -\r\n\t\t\tpublishedDate.getFullYear() +\r\n\t\t\t\" years ago\"\r\n\t\t);\r\n\t} else {\r\n\t\tif (currentDate.getMonth() - publishedDate.getMonth()) {\r\n\t\t\treturn (\r\n\t\t\t\tcurrentDate.getMonth() -\r\n\t\t\t\tpublishedDate.getMonth() +\r\n\t\t\t\t\" months ago\"\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tif(currentDate.getDate() - publishedDate.getDate()==0) return \"Today\";\r\n\t\t\tif(currentDate.getDate() - publishedDate.getDate()==1) return \"1 day ago\";\r\n\t\t\treturn (\r\n\t\t\t\tcurrentDate.getDate() - publishedDate.getDate() + \" days ago\"\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};"],"names":["_ref","_details$items$0$snip","_details$items$0$snip2","_details$items$0$snip3","_data$thumbnails","_data$thumbnails$medi","data","_useState","useState","_useState2","_slicedToArray","details","setDetails","useEffect","getChannelImage","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","api_data","json","wrap","_context","prev","next","fetch","channelImage_api","channelId","sent","stop","apply","arguments","_jsx","children","imgUrl","items","snippet","thumbnails","high","url","_jsxs","className","src","medium","title","PublishedTimeOfVideo","publishedAt","channelTitle","description","_useSearchParams","useSearchParams","query","get","searchresults","setSearchResults","dispatcher","useDispatch","getSearchData","Search_results_api","Google_api_key","map","result","_result$id","_result$id2","Link","to","id","videoId","onClick","_result$snippet","setChannelId","SearchVideoCard","publishedDate","Date","currentDate","getFullYear","getMonth","getDate"],"sourceRoot":""}